// Code generated by mockery v2.15.0. DO NOT EDIT.

package mock

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/vlla-test-organization/qubershi
	"github.com/vlla-test-organization/qubership-core-lib-go-dbaas-base-client/v3/model"
	mock "github.com/stretchr/testify/mock"
)

// LogicalDbProviderMock is an autogenerated mock type for the LogicalDbProvider type
type LogicalDbProviderMock struct {
	mock.Mock
}

type LogicalDbProviderMock_Expecter struct {
	mock *mock.Mock
}

func (_m *LogicalDbProviderMock) EXPECT() *LogicalDbProviderMock_Expecter {
	return &LogicalDbProviderMock_Expecter{mock: &_m.Mock}
}

// GetConnection provides a mock function with given fields: dbType, classifier, params
func (_m *LogicalDbProviderMock) GetConnection(dbType string, classifier map[string]interface{}, params rest.BaseDbParams) (map[string]interface{}, error) {
	ret := _m.Called(dbType, classifier, params)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}, rest.BaseDbParams) map[string]interface{}); ok {
		r0 = rf(dbType, classifier, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]interface{}, rest.BaseDbParams) error); ok {
		r1 = rf(dbType, classifier, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogicalDbProviderMock_GetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnection'
type LogicalDbProviderMock_GetConnection_Call struct {
	*mock.Call
}

// GetConnection is a helper method to define mock.On call
//   - dbType string
//   - classifier map[string]interface{}
//   - params rest.BaseDbParams
func (_e *LogicalDbProviderMock_Expecter) GetConnection(dbType interface{}, classifier interface{}, params interface{}) *LogicalDbProviderMock_GetConnection_Call {
	return &LogicalDbProviderMock_GetConnection_Call{Call: _e.mock.On("GetConnection", dbType, classifier, params)}
}

func (_c *LogicalDbProviderMock_GetConnection_Call) Run(run func(dbType string, classifier map[string]interface{}, params rest.BaseDbParams)) *LogicalDbProviderMock_GetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}), args[2].(rest.BaseDbParams))
	})
	return _c
}

func (_c *LogicalDbProviderMock_GetConnection_Call) Return(_a0 map[string]interface{}, _a1 error) *LogicalDbProviderMock_GetConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrCreateDb provides a mock function with given fields: dbType, classifier, params
func (_m *LogicalDbProviderMock) GetOrCreateDb(dbType string, classifier map[string]interface{}, params rest.BaseDbParams) (*model.LogicalDb, error) {
	ret := _m.Called(dbType, classifier, params)

	var r0 *model.LogicalDb
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}, rest.BaseDbParams) *model.LogicalDb); ok {
		r0 = rf(dbType, classifier, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LogicalDb)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]interface{}, rest.BaseDbParams) error); ok {
		r1 = rf(dbType, classifier, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogicalDbProviderMock_GetOrCreateDb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateDb'
type LogicalDbProviderMock_GetOrCreateDb_Call struct {
	*mock.Call
}

// GetOrCreateDb is a helper method to define mock.On call
//   - dbType string
//   - classifier map[string]interface{}
//   - params rest.BaseDbParams
func (_e *LogicalDbProviderMock_Expecter) GetOrCreateDb(dbType interface{}, classifier interface{}, params interface{}) *LogicalDbProviderMock_GetOrCreateDb_Call {
	return &LogicalDbProviderMock_GetOrCreateDb_Call{Call: _e.mock.On("GetOrCreateDb", dbType, classifier, params)}
}

func (_c *LogicalDbProviderMock_GetOrCreateDb_Call) Run(run func(dbType string, classifier map[string]interface{}, params rest.BaseDbParams)) *LogicalDbProviderMock_GetOrCreateDb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}), args[2].(rest.BaseDbParams))
	})
	return _c
}

func (_c *LogicalDbProviderMock_GetOrCreateDb_Call) Return(_a0 *model.LogicalDb, _a1 error) *LogicalDbProviderMock_GetOrCreateDb_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewLogicalDbProviderMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogicalDbProviderMock creates a new instance of LogicalDbProviderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogicalDbProviderMock(t mockConstructorTestingTNewLogicalDbProviderMock) *LogicalDbProviderMock {
	mock := &LogicalDbProviderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
